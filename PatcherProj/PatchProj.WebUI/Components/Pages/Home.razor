@page "/"
@rendermode InteractiveServer

@using Amazon.S3
@using Amazon.S3.Model
@using Microsoft.Extensions.Logging
@using System.IO
@using NF.UnityLibs.Managers.Patcher.Common
@using Newtonsoft.Json
@using PatchProj.WebUI.Utils

@inject ILogger<Home> Log
@inject IJSRuntime JsRuntime
@inject Class _cls;
@inject Config _config
@inject ScopedUser _user;

<style>
	table {
		border-collapse: collapse;
	}

	th, td {
		border: 1px solid black;
	}

</style>

<PageTitle>Home</PageTitle>

<button class="btn btn-primary" @onclick="async() => await OnBtnRefresh()">
	Refresh
</button>

<br />
<br />

@if (_user._patchVersionOrNull == null)
{
	<h2>Loading...</h2>
}
else
{
	PatchVersion patchVersion = _user._patchVersionOrNull!;

	<table border="1" cellspacing="5">
		<thead>
			<tr>
				<th scope="col">App Version</th>
				<th scope="col">Patch Version</th>
			</tr>
		</thead>
		<tbody>
			@foreach (KeyValuePair<string, int> kv in patchVersion)
			{
				<tr>
					<td>@kv.Key</td>
					<td>
						<a href="#" @onclick:preventDefault @onclick="@(async() => await OnClickValue(kv.Value))">@kv.Value</a>
					</td>

				</tr>
			}
		</tbody>
		<caption>
			PatchVersion
		</caption>
	</table>


	<input type="text" @bind="_txtAppVersion" />
	<input type="text" @bind="_txtPatchVersion" />

	<button class="btn btn-primary" @onclick="async() => await OnBtnSetVersion()">
		Set Version
	</button>
}


@if (_user._patchFileListOrNull == null)
{
	<h2>Loading...</h2>
}
else
{
	PatchFileList patchFileList = _user._patchFileListOrNull!;
	<h2>PatchVersion: @patchFileList.Version</h2>
	<table border="1" cellspacing="5">
		<thead>
			<tr>
				<th scope="col">Name</th>
				<th scope="col">Bytes</th>
				<th scope="col">Checksum</th>
			</tr>
		</thead>
		<tbody>
			@foreach (KeyValuePair<string, PatchFileList.PatchFileInfo> kv in patchFileList.Dic)
			{
				string url = $"{_config.URL}/bucket-a/prefix-a/{patchFileList.Version}/{@kv.Value.Name}";
				<tr>
					<td><a href="@url">@kv.Value.Name</a></td>
					<td>@kv.Value.Bytes</td>
					<td>@kv.Value.Checksum</td>
				</tr>
			}
		</tbody>
		<caption>
			PatchFileList
		</caption>
	</table>
}

@code
{
	string _txtAppVersion = "latest";
	int _txtPatchVersion = 0;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await OnBtnRefresh();
			StateHasChanged();
		}
	}

	async Task OnBtnRefresh()
	{
		await RefreshPatchVersion();
		StateHasChanged();
	}

	async Task RefreshPatchVersion()
	{
		_user._patchVersionOrNull = null;

		(bool isSuccess, PatchVersion patchVersion) = await _cls.TryGetPatchVersion();
		if (!isSuccess)
		{
			return;
		}

		_user._patchVersionOrNull = patchVersion;
	}

	async Task OnBtnSetVersion()
	{
		if (string.IsNullOrEmpty(_txtAppVersion))
		{
			return;
		}

		if (!await JsRuntime.InvokeAsync<bool>("confirm", $"Update?: {_txtPatchVersion}"))
		{
			return;
		}

		PatchVersion patchVersion = _user._patchVersionOrNull!;
		patchVersion[_txtAppVersion] = _txtPatchVersion;

		_cls.Upload(patchVersion);

		await RefreshPatchVersion();
		StateHasChanged();
	}

	async Task OnClickValue(int v)
	{
		(bool isSuccess, PatchFileList patchFileList) = await _cls.GetPatchFileList(v);
		if (!isSuccess)
		{
			return;
		}
		_user._patchFileListOrNull = patchFileList;
		StateHasChanged();
	}
}